{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"","slug":"02-变量声明","date":"2022-11-26T11:06:23.889Z","updated":"2021-11-13T08:15:56.000Z","comments":true,"path":"2022/11/26/02-变量声明/","link":"","permalink":"http://example.com/2022/11/26/02-%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/","excerpt":"","text":"概述在声明变量之前，咱们先了解下变量的数据类型，这篇文章主要涉及 字符串、布尔、数字，其他类型后面开篇再说。 数据类型字符串string 只能用一对双引号（””）或反引号（&#96;&#96;）括起来定义，不能用单引号（’’）定义！ 布尔bool 只有 true 和 false，默认为 false。 数字整型 int8 uint8 int16 uint16 int32 uint32 int64 uint64 int uint，具体长度取决于 CPU 位数。 浮点型 float32 float64 常量声明常量，在程序编译阶段就确定下来的值，而程序在运行时无法改变该值。 单个常量声明 第一种：const 变量名称 数据类型 &#x3D; 变量值 如果不赋值，使用的是该数据类型的默认值。 第二种：const 变量名称 &#x3D; 变量值 根据变量值，自行判断数据类型。 多个常量声明 第一种：const 变量名称,变量名称 … ,数据类型 &#x3D; 变量值,变量值 … 第二种：const 变量名称,变量名称 … &#x3D; 变量值,变量值 … 测试代码 1234567891011121314151617181920//demo_1.gopackage mainimport ( &quot;fmt&quot;)func main() &#123; const name string = &quot;Tom&quot; fmt.Println(name) const age = 30 fmt.Println(age) const name_1, name_2 string = &quot;Tom&quot;, &quot;Jay&quot; fmt.Println(name_1, name_2) const name_3, age_1 = &quot;Tom&quot;, 30 fmt.Println(name_3, age_1)&#125; 运行结果： 变量声明单个变量声明 第一种：var 变量名称 数据类型 &#x3D; 变量值 如果不赋值，使用的是该数据类型的默认值。 第二种：var 变量名称 &#x3D; 变量值 根据变量值，自行判断数据类型。 第三种：变量名称 :&#x3D; 变量值 省略了 var 和数据类型，变量名称一定要是未声明过的。 多个变量声明 第一种：var 变量名称,变量名称 … ,数据类型 &#x3D; 变量值,变量值 … 第二种：var 变量名称,变量名称 … &#x3D; 变量值,变量值 … 第三种：变量名称,变量名称 … :&#x3D; 变量值,变量值 … 测试代码 12345678910111213141516171819202122//demo_2.gopackage mainimport ( &quot;fmt&quot;)func main() &#123; var age_1 uint8 = 31 var age_2 = 32 age_3 := 33 fmt.Println(age_1, age_2, age_3) var age_4, age_5, age_6 int = 31, 32, 33 fmt.Println(age_4, age_5, age_6) var name_1, age_7 = &quot;Tom&quot;, 30 fmt.Println(name_1, age_7) name_2, is_boy, height := &quot;Jay&quot;, true, 180.66 fmt.Println(name_2, is_boy, height)&#125; 运行结果： 输出方法fmt.Print：输出到控制台（仅只是输出） fmt.Println：输出到控制台并换行 fmt.Printf：仅输出格式化的字符串和字符串变量（整型和整型变量不可以） fmt.Sprintf：格式化并返回一个字符串，不输出。 测试代码 1234567891011121314//demo_3.gopackage mainimport ( &quot;fmt&quot;)func main() &#123; fmt.Print(&quot;输出到控制台不换行&quot;) fmt.Println(&quot;---&quot;) fmt.Println(&quot;输出到控制台并换行&quot;) fmt.Printf(&quot;name=%s,age=%d\\n&quot;, &quot;Tom&quot;, 30) fmt.Printf(&quot;name=%s,age=%d,height=%v\\n&quot;, &quot;Tom&quot;, 30, fmt.Sprintf(&quot;%.2f&quot;, 180.567))&#125; 运行结果：","categories":[],"tags":[]},{"title":"firstblood","slug":"firstblood","date":"2022-11-26T11:04:12.000Z","updated":"2022-11-26T11:04:12.872Z","comments":true,"path":"2022/11/26/firstblood/","link":"","permalink":"http://example.com/2022/11/26/firstblood/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"site","slug":"site","date":"2022-11-26T02:13:42.000Z","updated":"2022-11-26T02:13:42.014Z","comments":true,"path":"2022/11/26/site/","link":"","permalink":"http://example.com/2022/11/26/site/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-11-26T02:08:06.226Z","updated":"2022-11-26T02:08:06.226Z","comments":true,"path":"2022/11/26/hello-world/","link":"","permalink":"http://example.com/2022/11/26/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}